{"ast":null,"code":"var _s = $RefreshSig$();\nimport react, { Component, useState } from \"react\";\nimport Field from \"./Field\";\nimport PostedField from \"./PostedField\";\nimport uniqid from \"uniqid\";\nimport \"../styles/section.css\";\nconst Section = props => {\n  _s();\n  const [posted, setPosted] = useState(false);\n  const [isValid, setisValid] = useState(Array(this.props.fields).map(field => {\n    if (field.type !== \"textarea\") {\n      return null;\n    }\n  }));\n  const [error, setError] = useState(false);\n};\n\n/*\nclass Section extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            posted: false,\n            isValid: Array(this.props.fields).map(field=>{\n                if(field.type !== \"textarea\"){\n                    return null\n                }\n            }),\n            error: false,\n        };\n\n        this.generateFields = this.generateFields.bind(this);\n        this.makePostComps = this.makePostComps.bind(this);\n        this.getVals = this.getVals.bind(this);\n        this.onPost = this.onPost.bind(this);\n        this.checkFormValid = this.checkFormValid.bind(this);\n    }\n\n\n    generateFields(vals=[]){\n        const fields = this.props.fields;\n\n        const fieldComps = fields.map((field, i)=>{\n            \n            return (\n                <Field name={field.name} \n                labelText={field.labelText} \n                type={field.type} key={uniqid()} \n                val={vals[i]} \n                onChange={this.checkFormValid}\n                onClick={this.checkFormValid}\n                isRequired={field.isRequired}\n                placeholder={field.placeholder}>\n                </Field>\n            )\n        })\n\n        return fieldComps;\n    }\n\n    makePostComps(vals){\n        const fields = this.props.fields;\n\n        const postComps = fields.map((field, i)=>{\n           return <PostedField labelText={field.labelText} key={uniqid()} fieldText={vals[i]}></PostedField>\n        })\n\n        return postComps;\n    }\n\n    getVals(){\n        let valNodes;\n        let vals;\n\n        if(this.state.posted){\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n\n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.value;\n    \n    \n                return val;\n            });\n        }else{\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .field-posted > .text-posted`);\n            \n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.textContent;\n    \n    \n                return val;\n            });\n        }\n\n        return vals;\n    }\n\n\n    checkFormValid(){\n        const fieldNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n        const fieldArr = Array.from(fieldNodes);\n        const validities = [...this.state.isValid];\n\n        fieldArr.forEach((field, i)=>{\n\n            if(field.type === \"text\"){\n                if(!field.value){\n                    validities.splice(i, 1, false);\n\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                    fieldNodes[i].classList.remove(\"field-valid\");\n                }else{\n                    validities.splice(i, 1, true);\n\n                    fieldNodes[i].classList.add(\"field-valid\");\n                    fieldNodes[i].classList.remove(\"field-invalid\");\n                }\n            }else if(field.type === \"email\"){\n                if(fieldNodes[i].checkValidity()){\n                    validities.splice(i, 1, true);\n                    fieldNodes[i].classList.add(\"field-valid\");\n                    fieldNodes[i].classList.remove(\"field-invalid\");\n                }else{\n                    validities.splice(i, 1, false);\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                    fieldNodes[i].classList.remove(\"field-valid\");\n                }\n            }else if(field.type === \"tel\"){\n                if(!field.value || field.value.match(/[0-9]{3}-[0-9]{3}-[0-9]{4}/) === null){\n                    validities.splice(i, 1, false);\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                    fieldNodes[i].classList.remove(\"field-valid\");\n                }else{\n                    validities.splice(i, 1, true);\n                    fieldNodes[i].classList.add(\"field-valid\");\n                    fieldNodes[i].classList.remove(\"field-invalid\");\n                }\n            }else if(field.type === \"date\"){\n                const now = new Date();\n                const inputDate = field.valueAsDate;\n\n                if(field.hasAttribute(\"required\")){\n                    if(!field.value || inputDate > now){\n                        validities.splice(i, 1, false);\n                        fieldNodes[i].classList.add(\"field-invalid\");\n                        fieldNodes[i].classList.remove(\"field-valid\");\n                    }else{\n                        validities.splice(i, 1, true);\n                        fieldNodes[i].classList.add(\"field-valid\");\n                        fieldNodes[i].classList.remove(\"field-invalid\");\n                    }\n                }else{\n                    validities.splice(i, 1, true);\n                }\n            }\n        })\n\n        return validities;\n    }\n\n    onPost(e){\n        e.preventDefault();\n\n        if(this.state.posted){\n            this.setState({\n                posted: false,\n            })\n        }else{\n            const validities = this.checkFormValid();\n\n            if(validities.every(val=>val)){\n                this.setState({                   \n                    posted: true,\n                    isValid: [...validities],\n                    error: false,\n                })\n            }else{\n                this.setState({\n                    error: true,\n                })\n            }\n        }\n    }\n\n\n    render(){\n\n        let fields;\n        let vals = this.getVals();\n        let btnText;\n        let errorText;\n        let btnClass;\n\n\n        if(!this.state.posted){\n            fields = this.generateFields(vals);\n            btnText = \"Submit Section\";\n            btnClass = `form-btn submit-btn`;\n        }else{\n            fields = this.makePostComps(vals);\n            btnText = \"Edit Section\";\n            btnClass = `form-btn edit-btn`;\n        }\n\n        if(this.state.error){\n            errorText = \"Please enter all data in the proper format.\"\n        }else{\n            errorText = \"\";\n        }\n\n        return (\n            <div className=\"section\" id={this.props.sectionID}>\n                <p className=\"form-title\">{this.props.sectionName}</p>\n                <p className=\"required-legend\">*required</p>\n                <form className=\"section-form\">\n                    {fields}\n                    <p className=\"error-text\">{errorText}</p>\n                    <button type=\"submit\" onClick={this.onPost} className={btnClass}>{btnText}</button>\n                </form>\n            </div>\n        )\n    }\n}\n*/\n_s(Section, \"eBmqL7LudHHDGxMbMES/ekcaP+I=\");\n_c = Section;\nexport default Section;\nvar _c;\n$RefreshReg$(_c, \"Section\");","map":{"version":3,"names":["react","Component","useState","Field","PostedField","uniqid","Section","props","_s","posted","setPosted","isValid","setisValid","Array","fields","map","field","type","error","setError","_c","$RefreshReg$"],"sources":["/Users/alecbongard/webdev/repos/cv-project/src/components/Section.js"],"sourcesContent":["import react, { Component, useState } from \"react\";\nimport Field from \"./Field\"\nimport PostedField from \"./PostedField\";\nimport uniqid from \"uniqid\";\nimport \"../styles/section.css\";\n\nconst Section = (props)=>{\n    const [posted, setPosted] = useState(false);\n    const [isValid, setisValid] = useState(Array(this.props.fields).map(field=>{\n        if(field.type !== \"textarea\"){\n            return null\n        }\n    }));\n    const [error, setError] = useState(false);\n}\n\n/*\nclass Section extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            posted: false,\n            isValid: Array(this.props.fields).map(field=>{\n                if(field.type !== \"textarea\"){\n                    return null\n                }\n            }),\n            error: false,\n        };\n\n        this.generateFields = this.generateFields.bind(this);\n        this.makePostComps = this.makePostComps.bind(this);\n        this.getVals = this.getVals.bind(this);\n        this.onPost = this.onPost.bind(this);\n        this.checkFormValid = this.checkFormValid.bind(this);\n    }\n\n\n    generateFields(vals=[]){\n        const fields = this.props.fields;\n\n        const fieldComps = fields.map((field, i)=>{\n            \n            return (\n                <Field name={field.name} \n                labelText={field.labelText} \n                type={field.type} key={uniqid()} \n                val={vals[i]} \n                onChange={this.checkFormValid}\n                onClick={this.checkFormValid}\n                isRequired={field.isRequired}\n                placeholder={field.placeholder}>\n                </Field>\n            )\n        })\n\n        return fieldComps;\n    }\n\n    makePostComps(vals){\n        const fields = this.props.fields;\n\n        const postComps = fields.map((field, i)=>{\n           return <PostedField labelText={field.labelText} key={uniqid()} fieldText={vals[i]}></PostedField>\n        })\n\n        return postComps;\n    }\n\n    getVals(){\n        let valNodes;\n        let vals;\n\n        if(this.state.posted){\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n\n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.value;\n    \n    \n                return val;\n            });\n        }else{\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .field-posted > .text-posted`);\n            \n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.textContent;\n    \n    \n                return val;\n            });\n        }\n\n        return vals;\n    }\n\n\n    checkFormValid(){\n        const fieldNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n        const fieldArr = Array.from(fieldNodes);\n        const validities = [...this.state.isValid];\n\n        fieldArr.forEach((field, i)=>{\n\n            if(field.type === \"text\"){\n                if(!field.value){\n                    validities.splice(i, 1, false);\n\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                    fieldNodes[i].classList.remove(\"field-valid\");\n                }else{\n                    validities.splice(i, 1, true);\n\n                    fieldNodes[i].classList.add(\"field-valid\");\n                    fieldNodes[i].classList.remove(\"field-invalid\");\n                }\n            }else if(field.type === \"email\"){\n                if(fieldNodes[i].checkValidity()){\n                    validities.splice(i, 1, true);\n                    fieldNodes[i].classList.add(\"field-valid\");\n                    fieldNodes[i].classList.remove(\"field-invalid\");\n                }else{\n                    validities.splice(i, 1, false);\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                    fieldNodes[i].classList.remove(\"field-valid\");\n                }\n            }else if(field.type === \"tel\"){\n                if(!field.value || field.value.match(/[0-9]{3}-[0-9]{3}-[0-9]{4}/) === null){\n                    validities.splice(i, 1, false);\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                    fieldNodes[i].classList.remove(\"field-valid\");\n                }else{\n                    validities.splice(i, 1, true);\n                    fieldNodes[i].classList.add(\"field-valid\");\n                    fieldNodes[i].classList.remove(\"field-invalid\");\n                }\n            }else if(field.type === \"date\"){\n                const now = new Date();\n                const inputDate = field.valueAsDate;\n\n                if(field.hasAttribute(\"required\")){\n                    if(!field.value || inputDate > now){\n                        validities.splice(i, 1, false);\n                        fieldNodes[i].classList.add(\"field-invalid\");\n                        fieldNodes[i].classList.remove(\"field-valid\");\n                    }else{\n                        validities.splice(i, 1, true);\n                        fieldNodes[i].classList.add(\"field-valid\");\n                        fieldNodes[i].classList.remove(\"field-invalid\");\n                    }\n                }else{\n                    validities.splice(i, 1, true);\n                }\n            }\n        })\n\n        return validities;\n    }\n\n    onPost(e){\n        e.preventDefault();\n\n        if(this.state.posted){\n            this.setState({\n                posted: false,\n            })\n        }else{\n            const validities = this.checkFormValid();\n\n            if(validities.every(val=>val)){\n                this.setState({                   \n                    posted: true,\n                    isValid: [...validities],\n                    error: false,\n                })\n            }else{\n                this.setState({\n                    error: true,\n                })\n            }\n        }\n    }\n\n\n    render(){\n\n        let fields;\n        let vals = this.getVals();\n        let btnText;\n        let errorText;\n        let btnClass;\n\n\n        if(!this.state.posted){\n            fields = this.generateFields(vals);\n            btnText = \"Submit Section\";\n            btnClass = `form-btn submit-btn`;\n        }else{\n            fields = this.makePostComps(vals);\n            btnText = \"Edit Section\";\n            btnClass = `form-btn edit-btn`;\n        }\n\n        if(this.state.error){\n            errorText = \"Please enter all data in the proper format.\"\n        }else{\n            errorText = \"\";\n        }\n\n        return (\n            <div className=\"section\" id={this.props.sectionID}>\n                <p className=\"form-title\">{this.props.sectionName}</p>\n                <p className=\"required-legend\">*required</p>\n                <form className=\"section-form\">\n                    {fields}\n                    <p className=\"error-text\">{errorText}</p>\n                    <button type=\"submit\" onClick={this.onPost} className={btnClass}>{btnText}</button>\n                </form>\n            </div>\n        )\n    }\n}\n*/\n\nexport default Section;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,uBAAuB;AAE9B,MAAMC,OAAO,GAAIC,KAAK,IAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAACW,KAAK,CAAC,IAAI,CAACN,KAAK,CAACO,MAAM,CAAC,CAACC,GAAG,CAACC,KAAK,IAAE;IACvE,IAAGA,KAAK,CAACC,IAAI,KAAK,UAAU,EAAC;MACzB,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,CAAC;EACH,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/MAM,EAAA,CAVMF,OAAO;AAAAc,EAAA,GAAPd,OAAO;AA2Nb,eAAeA,OAAO;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}