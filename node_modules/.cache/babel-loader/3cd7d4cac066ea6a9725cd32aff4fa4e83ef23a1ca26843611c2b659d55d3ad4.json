{"ast":null,"code":"var _jsxFileName = \"/Users/alecbongard/webdev/repos/cv-project/src/components/Section.js\";\nimport react, { Component } from \"react\";\nimport Field from \"./Field\";\nimport PostedField from \"./PostedField\";\nimport uniqid from \"uniqid\";\nimport \"../styles/section.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Section extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posted: false,\n      isValid: Array(this.props.fields.length).fill(null)\n    };\n    this.generateFields = this.generateFields.bind(this);\n    this.makePostComps = this.makePostComps.bind(this);\n    this.getVals = this.getVals.bind(this);\n    this.onPost = this.onPost.bind(this);\n    this.checkFormValid = this.checkFormValid.bind(this);\n  }\n  generateFields() {\n    let vals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const fields = this.props.fields;\n    const fieldComps = fields.map((field, i) => {\n      return /*#__PURE__*/_jsxDEV(Field, {\n        name: field.name,\n        labelText: field.labelText,\n        type: field.type,\n        val: vals[i],\n        onChange: this.checkFormValid\n      }, uniqid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this);\n    });\n    return fieldComps;\n  }\n  makePostComps(vals) {\n    const fields = this.props.fields;\n    const postComps = fields.map((field, i) => {\n      return /*#__PURE__*/_jsxDEV(PostedField, {\n        labelText: field.labelText,\n        fieldText: vals[i]\n      }, uniqid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 19\n      }, this);\n    });\n    return postComps;\n  }\n  getVals() {\n    let valNodes;\n    let vals;\n    if (this.state.posted) {\n      valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n      vals = Array.from(valNodes).map((node, i) => {\n        const val = node.value;\n        return val;\n      });\n    } else {\n      valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .field-posted > .text-posted`);\n      vals = Array.from(valNodes).map((node, i) => {\n        const val = node.textContent;\n        return val;\n      });\n    }\n    return vals;\n  }\n  checkFormValid() {\n    const fieldNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n    const fieldArr = Array.from(fieldNodes);\n    const validities = [...this.state.isValid];\n    fieldArr.forEach((field, i) => {\n      if (field.type === \"text\") {\n        if (!field.value) {\n          validities.splice(i, 1, false);\n          fieldNodes[i].classList.add(\"field-invalid\");\n        } else {\n          validities.splice(i, 1, true);\n          fieldNodes[i].classList.add(\"field-valid\");\n          fieldNodes[i].classList.remove(\"field-invalid\");\n        }\n      } else if (field.type === \"email\") {\n        if (fieldNodes[i].checkValidity()) {\n          validities.splice(i, 1, true);\n          fieldNodes[i].classList.add(\"field-valid\");\n        } else {\n          validities.splice(i, 1, false);\n          fieldNodes[i].classList.add(\"field-invalid\");\n        }\n      } else if (field.type === \"tel\") {\n        if (!field.value || field.value.match(/[0-9]{3}-[0-9]{3}-[0-9]{4}/) === null) {\n          validities.splice(i, 1, false);\n          fieldNodes[i].classList.add(\"field-invalid\");\n        } else {\n          validities.splice(i, 1, true);\n          fieldNodes[i].classList.add(\"field-invalid\");\n        }\n      }\n    });\n    return validities;\n  }\n  onPost(e) {\n    e.preventDefault();\n    if (this.state.posted) {\n      this.setState({\n        posted: false\n      });\n    } else {\n      const validities = this.checkFormValid();\n      if (validities.every(val => val)) {\n        this.setState({\n          posted: true,\n          isValid: [...validities]\n        });\n      }\n    }\n  }\n  render() {\n    let fields;\n    let vals = this.getVals();\n    let btnText;\n    if (!this.state.posted) {\n      fields = this.generateFields(vals);\n      btnText = \"Submit Section\";\n    } else {\n      fields = this.makePostComps(vals);\n      btnText = \"Edit Section\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      id: this.props.sectionID,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"form-title\",\n        children: this.props.sectionName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [fields, /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: this.onPost,\n          children: btnText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Section;","map":{"version":3,"names":["react","Component","Field","PostedField","uniqid","jsxDEV","_jsxDEV","Section","constructor","props","state","posted","isValid","Array","fields","length","fill","generateFields","bind","makePostComps","getVals","onPost","checkFormValid","vals","arguments","undefined","fieldComps","map","field","i","name","labelText","type","val","onChange","fileName","_jsxFileName","lineNumber","columnNumber","postComps","fieldText","valNodes","document","querySelectorAll","sectionID","from","node","value","textContent","fieldNodes","fieldArr","validities","forEach","splice","classList","add","remove","checkValidity","match","e","preventDefault","setState","every","render","btnText","className","id","children","sectionName","onClick"],"sources":["/Users/alecbongard/webdev/repos/cv-project/src/components/Section.js"],"sourcesContent":["import react, { Component } from \"react\";\nimport Field from \"./Field\"\nimport PostedField from \"./PostedField\";\nimport uniqid from \"uniqid\";\nimport \"../styles/section.css\";\n\nclass Section extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            posted: false,\n            isValid: Array(this.props.fields.length).fill(null),\n        };\n\n        this.generateFields = this.generateFields.bind(this);\n        this.makePostComps = this.makePostComps.bind(this);\n        this.getVals = this.getVals.bind(this);\n        this.onPost = this.onPost.bind(this);\n        this.checkFormValid = this.checkFormValid.bind(this);\n    }\n\n\n    generateFields(vals=[]){\n        const fields = this.props.fields;\n\n        const fieldComps = fields.map((field, i)=>{\n            \n            return (\n                <Field name={field.name} labelText={field.labelText} type={field.type} key={uniqid()} val={vals[i]} onChange={this.checkFormValid}></Field>\n            )\n        })\n\n        return fieldComps;\n    }\n\n    makePostComps(vals){\n        const fields = this.props.fields;\n\n        const postComps = fields.map((field, i)=>{\n           return <PostedField labelText={field.labelText} key={uniqid()} fieldText={vals[i]}></PostedField>\n        })\n\n        return postComps;\n    }\n\n    getVals(){\n        let valNodes;\n        let vals;\n\n        if(this.state.posted){\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n\n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.value;\n    \n    \n                return val;\n            });\n        }else{\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .field-posted > .text-posted`);\n            \n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.textContent;\n    \n    \n                return val;\n            });\n        }\n\n        return vals;\n    }\n\n    checkFormValid(){\n        const fieldNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n        const fieldArr = Array.from(fieldNodes);\n        const validities = [...this.state.isValid];\n\n        fieldArr.forEach((field, i)=>{\n\n            if(field.type === \"text\"){\n                if(!field.value){\n                    validities.splice(i, 1, false);\n\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                }else{\n                    validities.splice(i, 1, true);\n\n                    fieldNodes[i].classList.add(\"field-valid\");\n                    fieldNodes[i].classList.remove(\"field-invalid\");\n                }\n            }else if(field.type === \"email\"){\n                if(fieldNodes[i].checkValidity()){\n                    validities.splice(i, 1, true);\n                    fieldNodes[i].classList.add(\"field-valid\");\n                }else{\n                    validities.splice(i, 1, false);\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                }\n            }else if(field.type === \"tel\"){\n                if(!field.value || field.value.match(/[0-9]{3}-[0-9]{3}-[0-9]{4}/) === null){\n                    validities.splice(i, 1, false);\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                }else{\n                    validities.splice(i, 1, true);\n                    fieldNodes[i].classList.add(\"field-invalid\");\n                }\n            }\n        })\n\n        return validities;\n    }\n\n    onPost(e){\n        e.preventDefault();\n\n        if(this.state.posted){\n            this.setState({\n                posted: false,\n            })\n        }else{\n            const validities = this.checkFormValid();\n\n            if(validities.every(val=>val)){\n                this.setState({\n                    posted: true,\n                    isValid: [...validities],\n                })\n            }\n        }\n    }\n\n\n    render(){\n\n        let fields;\n        let vals = this.getVals();\n        let btnText;\n\n        if(!this.state.posted){\n            fields = this.generateFields(vals);\n            btnText = \"Submit Section\";\n        }else{\n            fields = this.makePostComps(vals);\n            btnText = \"Edit Section\";\n        }\n\n        return (\n            <div className=\"section\" id={this.props.sectionID}>\n                <p className=\"form-title\">{this.props.sectionName}</p>\n                <form>\n                    {fields}\n                    <button type=\"submit\" onClick={this.onPost}>{btnText}</button>\n                </form>\n\n            </div>\n        )\n    }\n}\n\nexport default Section;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}