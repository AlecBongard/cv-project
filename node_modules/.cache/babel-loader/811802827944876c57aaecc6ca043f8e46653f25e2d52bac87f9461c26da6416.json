{"ast":null,"code":"var _jsxFileName = \"/Users/alecbongard/webdev/repos/cv-project/src/components/Section.js\";\nimport react, { Component } from \"react\";\nimport Field from \"./Field\";\nimport PostedField from \"./PostedField\";\nimport uniqid from \"uniqid\";\nimport \"../styles/section.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Section extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posted: false\n    };\n    this.generateFields = this.generateFields.bind(this);\n    this.makePostComps = this.makePostComps.bind(this);\n    this.getVals = this.getVals.bind(this);\n    this.onPost = this.onPost.bind(this);\n  }\n  generateFields() {\n    let vals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const fields = this.props.fields;\n    const fieldComps = fields.map((field, i) => {\n      return /*#__PURE__*/_jsxDEV(Field, {\n        name: field.name,\n        labelText: field.labelText,\n        type: field.type,\n        val: vals[i]\n      }, uniqid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this);\n    });\n    return fieldComps;\n  }\n  makePostComps(vals) {\n    const fields = this.props.fields;\n    const postComps = fields.map((field, i) => {\n      return /*#__PURE__*/_jsxDEV(PostedField, {\n        labelText: field.labelText,\n        fieldText: vals[i]\n      }, uniqid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }, this);\n    });\n    return postComps;\n  }\n  getVals() {\n    let valNodes;\n    let vals;\n    if (this.state.posted) {\n      valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n      vals = Array.from(valNodes).map((node, i) => {\n        const val = node.value;\n        return val;\n      });\n    } else {\n      valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .field-posted > .text-posted`);\n      vals = Array.from(valNodes).map((node, i) => {\n        const val = node.textContent;\n        return val;\n      });\n    }\n    return vals;\n  }\n  checkValid() {\n    fieldNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n  }\n  onPost(e) {\n    e.preventDefault();\n    if (this.state.posted) {\n      this.setState({\n        posted: false\n      });\n    } else {\n      this.setState({\n        posted: true\n      });\n    }\n  }\n  render() {\n    let fields;\n    let vals = this.getVals();\n    let btnText;\n    if (!this.state.posted) {\n      fields = this.generateFields(vals);\n      btnText = \"Submit Section\";\n    } else {\n      fields = this.makePostComps(vals);\n      btnText = \"Edit Section\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      id: this.props.sectionID,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"form-title\",\n        children: this.props.sectionName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [fields, /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: this.onPost,\n          children: btnText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Section;","map":{"version":3,"names":["react","Component","Field","PostedField","uniqid","jsxDEV","_jsxDEV","Section","constructor","props","state","posted","generateFields","bind","makePostComps","getVals","onPost","vals","arguments","length","undefined","fields","fieldComps","map","field","i","name","labelText","type","val","fileName","_jsxFileName","lineNumber","columnNumber","postComps","fieldText","valNodes","document","querySelectorAll","sectionID","Array","from","node","value","textContent","checkValid","fieldNodes","e","preventDefault","setState","render","btnText","className","id","children","sectionName","onClick"],"sources":["/Users/alecbongard/webdev/repos/cv-project/src/components/Section.js"],"sourcesContent":["import react, { Component } from \"react\";\nimport Field from \"./Field\"\nimport PostedField from \"./PostedField\";\nimport uniqid from \"uniqid\";\nimport \"../styles/section.css\";\n\nclass Section extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            posted: false,\n        };\n\n        this.generateFields = this.generateFields.bind(this);\n        this.makePostComps = this.makePostComps.bind(this);\n        this.getVals = this.getVals.bind(this);\n        this.onPost = this.onPost.bind(this);\n    }\n\n\n    generateFields(vals=[]){\n        const fields = this.props.fields;\n\n        const fieldComps = fields.map((field, i)=>{\n            \n            return (\n                <Field name={field.name} labelText={field.labelText} type={field.type} key={uniqid()} val={vals[i]}></Field>\n            )\n        })\n\n        return fieldComps;\n    }\n\n    makePostComps(vals){\n        const fields = this.props.fields;\n\n        const postComps = fields.map((field, i)=>{\n           return <PostedField labelText={field.labelText} key={uniqid()} fieldText={vals[i]}></PostedField>\n        })\n\n        return postComps;\n    }\n\n    getVals(){\n        let valNodes;\n        let vals;\n\n        if(this.state.posted){\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n\n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.value;\n    \n    \n                return val;\n            });\n        }else{\n            valNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .field-posted > .text-posted`);\n            \n            vals = Array.from(valNodes).map((node, i)=>{\n                const val = node.textContent;\n    \n    \n                return val;\n            });\n        }\n\n        return vals;\n    }\n\n    checkValid(){\n        fieldNodes = document.querySelectorAll(`#${this.props.sectionID} > form > .input-wrap > input`);\n    }\n\n    onPost(e){\n        e.preventDefault();\n\n        if(this.state.posted){\n\n\n            this.setState({\n                posted: false,\n            })\n        }else{\n            this.setState({\n                posted: true,\n            })\n        }\n    }\n\n\n    render(){\n        let fields;\n        let vals = this.getVals();\n        let btnText;\n\n        if(!this.state.posted){\n            fields = this.generateFields(vals);\n            btnText = \"Submit Section\";\n        }else{\n            fields = this.makePostComps(vals);\n            btnText = \"Edit Section\";\n        }\n\n        return (\n            <div className=\"section\" id={this.props.sectionID}>\n                <p className=\"form-title\">{this.props.sectionName}</p>\n                <form>\n                    {fields}\n                    <button type=\"submit\" onClick={this.onPost}>{btnText}</button>\n                </form>\n\n            </div>\n        )\n    }\n}\n\nexport default Section;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}